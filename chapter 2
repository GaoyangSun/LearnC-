整数必须进行初始化，否则值不确定
初始化方式
1. int num = 10
2. int num (10)
3. int num {10}


#include<iostream>

using namespace std;

int main()
{
	int a = 0;
	unsigned int b = 0;
	short c = 0;
	long d = 0;
	long long e = 0;

	cout << "sizeof(int): " << sizeof(int) << "; " << sizeof(a) <<  endl;  // 4
	cout << "sizeof(unsigned int): " << sizeof(unsigned int) << "; " << sizeof(b) << endl; // 4
	cout << "sizeof(short): " << sizeof(short) << "; " << sizeof(c) << endl; // 2
	cout << "sizeof(long): " << sizeof(long) << "; " << sizeof(d) << endl; // 4
	cout << "sizeof(long long): " << sizeof(long long) << "; " << sizeof(e) << endl; // 8
  cout << "sizeof(size_t): " << sizeof(size_t) << endl; // 8
  }
  
一个字节（byte）8位（bit）
int整数一般为32位（4 bytes） 其中第一位是符号（0->正 1->负）
short 2字节 16位
long/int 4字节 32位
long long 8字节 64位
size_t -> 一般用来表示内存大小，元素个数等。 过去使用int32一般就够了（2 xexp 32 = 4 * (2 xexp 10） xexp 3 -> 4GB

#include<iostream>
using namespace std;

int main()
{
	unsigned int a = 56789;
	unsigned int b = 56789;
	unsigned int c = a * b;
	cout << "c = " << c << endl;
	return 0;
}

56789 xexp 2 -> 3224990521 （within (2^31-1, 2^32-1)) -> 11000000001110010111001100111001 -> 这个32位的数第一位为1，即负数 -> -1077506873
所以要用unsigned int,这样32位全是数字，没有符号，就可以计算
如果32过多或过少，可以使用 long long (64) short int (16)
int8的取值范围 第一位是sign bit， 后面7位是num bit
当第一位是1，后面全是0 -> 0
当第一位是0，后面全是0 -> -0
最大数为8位全是1 -> 1111 1111 -> + 111 1111 -> +127
0有1个即可，因此把-0，即 0000 0000规定为最小数，-128


char是8位整数，+c1做强制类型转换

#include<iostream>
using namespace std;

int main()
{
	char c1 = 'C';
	char c2 = 80;
	char c3 = 0x50;

	char16_t c4 = u'阳';
	char32_t c5 = U'阳';

	cout << "c1: " << c1 << endl; // C
	cout << "c2: " << c2 << endl; // P
	cout << "c3: " << c3 << endl; // P
	cout << "c4: " << c4 << endl; // 38451
	cout << "c5: " << c5 << endl; // 38451
	cout << "c1: " << +c1 << endl; // 67
	cout << "c2: " << +c2 << endl; // 80
	cout << "c3: " << +c3 << endl; // 80
	cout << "c4: " << +c4 << endl; // 38451
	cout << "c5: " << +c5 << endl; // 38451
}


bool布尔类型可以当做整数处理，理论上一个bit就够了，但是电脑最小储存单元为8bit（1byte），因此也占1字节
非0的整数转换后都为true，0为false

#include<iostream>
using namespace std;

int main()
{
	bool b1 = true;
	int i = b1;
	bool b2 = -256;

	cout << "i: " << i << endl; // 1
	cout << "b1: " << b1 << endl; // 1
	cout << "b2: " << b2 << endl; // 1
	cout << "true: " << true << endl; // 1
	cout << "sizeof(true): " << sizeof(true) << endl; // 1

}

cstdint包含一些更具体的数据类型以及各类型的最大最小值
intx_t/ uintx_t/ INTX_MIN/ INTX_MAX

#include<iostream>
#include<cstdint>

using namespace std;

int main()
{
	cout << sizeof(int8_t) << " " << sizeof(uint8_t) << endl; // 1 1
	cout << sizeof(int64_t) << " " << sizeof(uint64_t) << endl; // 8 8 
	cout << INT8_MIN << " " << INT64_MAX << endl; // -128 9223372036854775807

}



浮点数(32bit)与整数最大的区别在于，浮点数在一个范围内有无穷多个，因此无法用32bit精确表达
假设浮点数从左到右为（b31 b30 ... b1 b0） 
第一位（b31） 为符号位（sign）
第二到第九位（b30->b23） 为指数位（exponent）
第十到最后以为（b22->b0） 为分数位（fraction）
FLOAT-> (-1)^b31 * 2^（b30b29...b23)-127 * (1.b22b21...b0)
双精度（double）可以表达64bit 计算更慢
半精度（half-percision） 可以表达16bit 计算更快


#include<iostream>
#include<iomanip>
using namespace std;
int main()
{
	float f1 = 1.2f;
	float f2 = f1 * 10000000000000;
	cout << std::fixed << std::setprecision(15) << f1 << endl; // 1.200000047683716
	cout << std::fixed << std::setprecision(15) << f2 << endl; // 12000000212992.000000000000000
	cout << "sizeof(f1): " << sizeof(f1) << endl; // sizeof(f1): 4
	cout << "sizeof(f2): " << sizeof(f2) << endl; // sizeof(f2): 4
	return 0;
}

由于采样精度的不足，对一个较大的浮点数只增加一个很小的量，可能导致增量不足以到下一个采样点，加完和原来的数相同
判断两个浮点数相等，不要用 (f1==f2), 应该用 (fabs(f1-f2) < FLT_EPSILON


#include <iostream>
using namespace std;

int main()
{
    float f1 = 2.34E+10f;
    float f2 = f1 + 10;
    int i1 = 2.34E+10;
    int i2 = i1 + 10;

    cout << "i1 - i2 = " << i1 - i2 << endl;  // -10
    cout << "(i1 - i2 == 0) = " << (i1 - i2 == 0) << endl; // 0

    cout.setf(ios_base::fixed, ios_base::floatfield); // fixed-point
    cout << "f1 = " << f1 << endl; // 23399999488.000000
    cout << "f2 = " << f2 << endl; // 23399999488.000000
    cout << "f1 - f2 = " << f1 - f2 << endl; // 0.000000
    cout << "(f1 - f2 == 0) = " << (f1 - f2 == 0) << endl; // 1
    return 0;
}


inf: 指数位11111111, 分数位0
nan: 指数位11111111, 分数位不等于0

#include <iostream>
using namespace std;

int main()
{
    float f1 = 2.0f / 0.0f;
    float f2 = 0.0f / 0.0f;
    cout << f1 << endl; // inf
    cout << f2 << endl; // nan
    return 0;
}

0137 -> 0开头的是8进制，64 + 24 + 7 = 95
0x5F -> 0x开头是16进制，80 + 15 = 95

#include <iostream>
using namespace std;

int main()
{
    int a = 95;
    int b = 0137;
    int c = 0x5F;
    auto d = 95u; // unsigned
    auto e = 95l; // long
    auto f = 95ul; // unsigned long
    auto h = 6.03e5L; // long double
    auto i = 6.03e5f; // float
    auto j = 6.03e5; // double

    cout << a << endl; // 95
    cout << b << endl; // 95
    cout << c << endl; // 95
    cout << d << endl; // 95
    cout << e << endl; // 95
    cout << f << endl; // 95
    cout << h << endl; // 603000
    cout << i << endl; // 603000
    cout << j << endl; // 603000

}


short最多16位，第一位是sign，后面15位是数字 2 xexp 16 -> 65536
因此 num_short1 第一位是1 num_short2 第一位是0
65000 - 65536 -> -536  65540 - 65536 -> 4

unsigned char 最高是8位，最大表示255 但运算操作只有4中：int long float double
尽管 c1+c2超出了能表示的最大范围，但是在加法运算时会强制转换成int
因此c1+c2=256. c3（int）可以表示256， c4(unsigned char)无法表示，转成0


#include <iostream>
using namespace std;

int main()
{
    int num_int1 = 9; // assigning an int value to num_int1
    int num_int2 = 'C'; // implicit conversion
    int num_int3 = (int)'C'; // explicit conversion, C-style
    int num_int4 = int('C'); // explicit conversion, function style
    int num_int5 = 2.8; //implicit conversion
    float num_float = 2.3; // implicit conversion from double to float, may loss precision
    short num_short1 = 65000;
    short num_short2 = 65540;
    float a = 17 / 5;
    float b = 17 / 5.f; 
    unsigned char c1 = 255;
    unsigned char c2 = 1;
    int c3 = c1 + c2;
    unsigned char c4 = c1 + c2;
    
    cout << num_int2 << endl; // 67
    cout << num_int5 << endl; // 2
    cout << num_float << endl; // 2.3
    cout << num_short1 << endl; // -536
    cout << num_short2 << endl; // 4
    cout << sizeof(num_short1) << endl; // 2
    cout << a << endl; // 3
    cout << b << endl; // 3.4
    cout << c3 << endl; // 256
    cout << "c4: " << +c4 << endl; // 256

    return 0;
}

#include<iostream>
using namespace std;

int main()
{
	int a = 3;
	int b = a++;
	int c = ++a;
	cout << "b= " << b << endl; //3
	cout << "c= " << c << endl; //5
	return 0;
}

#include <iostream>

using namespace std;

int main(int argc, char const* argv[])
{
	unsigned int a = -1;
	printf("%d\n", a); // -1
	printf("%u\n", a); // 4294967295
	int MAX = a >> 1; // 算术右移
	int MIN = MAX + 1;
	int c = MIN - 1;
	int d = MAX + 1;
	printf("[%d, %d]\n", MIN, MAX); // [-2147483648, 2147483647]
	printf("[%d, %d]\n", c, d); // [-2147483648, 2147483647]
	return 0;
}
min -1 = max
unsigned int 最小值为0， a=0-1 -> max 32位全是1
a >> 1 右移一位，第一位是0，后面全是1，为signed int32位最大
