// 数组在c++中不是对象，而是一个连续的内存块，对于数组的长度需要单独一个变量记住
// 初始化的时候至少要对第一个元素赋值，这样后面的元素自动变0，若都不初始化，则数组内所有值为随机值
#include<iostream>
using namespace std;

int main()
{
	int num_array1[5] = {2};
	int num_array2[5] = {0,1,2,3,4};

	for (int idx = 0; idx < 5; idx++)
		cout << num_array1[idx] << " ";
	cout << endl;

	for (int idx = 0; idx < 5; idx++)
		cout << num_array2[idx] << " ";
	cout << endl;

}

// vs不支持变常数组，使用g++编译可以运行
// array可以看做指针，因此array和&array都代表array的首地址
// num_array3没有长度，因此可以看到他没有被分配内存，首地址和num_array1相同。
// num_array4[9]的地址和num_array4相差2*16 + 4 = 36, 因为9*4 = 36

#include<iostream>
using namespace std;

int main()
{
	int num_array1[10] = { 0 };
	cout << sizeof(num_array1) << endl; // 10 * 4
	cout << num_array1 << endl; // 0x61fecc

	int num_array3[0] = {};
	cout << sizeof(num_array3) << endl; // 0 
	cout << &num_array3 << endl; // 0x61fecc
	cout << num_array3 << endl; // 0x61fecc

	int len = 0;
	while (len < 10)
	{
		int num_array2[len]; // 变常数组无法初始化
		cout << "len = " << len;
		cout << ",sizeof(num_array2))=" << sizeof(num_array2) << endl;
		// 每个整数占4个字节 因此sizeof是len的4倍
		len++;
	}
	int num_array4[10] = { 0 };
	cout << num_array4 << endl; // 0x61fea4
	cout << &num_array4[9] << endl; // 0x61fec8
}



// c++不会进行边界检查

#include<iostream>
using namespace std;

int main()
{
	int num_array[5];
	for (int idx = -1; idx <= 5; idx++)
		cout << "num_array[" << idx << "] = " << num_array[idx] << endl;
	return 0;
// 数组长度为5，更改了7次但可以更改成功，-1和5是数组内存前后的内存块，此时已被更改
}

/*
#include <iostream>
using namespace std;

// 多维数组也是几块连续内存，声明时必须列数，这样才知道第二行从哪里开始
void init_2d_array(float mat[][4], size_t rows, size_t cols)
{
	for (int r = 0; r < rows; r++)
		for (int c = 0; c < rows; c++)
			mat[r][c] = r * c;
}


int main()
{
	int rows = 5;
	int cols = 4;
	float mat1[rows][cols];

	init_2d_array(mat1, rows, cols);

	for (int r = 0; r < rows; r++)
		for (int c = 0; c < cols; c++)
			cout << mat1[r][c] << " ";
		cout << endl;
}
*/
#include <iostream>
using namespace std;

// 多维数组也是几块连续内存，声明时必须列数，这样才知道第二行从哪里开始
void init_2d_array(float mat[][4], //error, arrays of unknown bound
	size_t rows, size_t cols)
{
	for (int r = 0; r < rows; r++)
		for (int c = 0; c < cols; c++)
			mat[r][c] = r * c;
}

int main()
{
	int mat1[2][3] = { {11,12,13}, {14,15,16} };

	int rows = 5;
	int cols = 4;

	float mat2[rows][4]; // 这个地方不能写cols，只能写4（我不知道为啥）

	init_2d_array(mat2, rows, cols);


	for (int r = 0; r < rows; r++)
	{
		for (int c = 0; c < cols; c++)
			cout << mat2[r][c] << " ";
		cout << endl;
	}
	return 0;
}



#include <iostream>
using namespace std;

// 在不需要修改数组的值时，可以使用const数组
float array_sum(const float values[], size_t length)
{
	float sum = 0.0f;
	for (int i = 0; i < length; i++)
	{
		sum += values[i];
		//values[i] = 0; //error
	}
	return sum;
}

int main()
{
	// const float PI = 3.1415926f;
	// PI += 1.f; // error
	// const float values[4] = {1.1f, 2.2f, 3.3f, 4.4f};
	// values[0] = 1.0f; // error

	float values[4] = { 1.1f, 2.2f, 3.3f, 4.4f };
	float sum = array_sum(values, 4);

	cout << "sum = " << sum << endl;
	return 0;
}



#include <iostream>
using namespace std;

int main()
{
	char rabbit[16] = { 'P','e','t','e','r' };
	cout << "string length: " << strlen(rabbit) << endl;  // 字符串长度为5
	cout << size(rabbit) << endl; // 数组长度为16


	for (int i = 0; i < 16; i++)
		cout << i << ":" << rabbit[i] << endl;

	char bad_pig[9] = { 'P','e','p','p','a',' ','p','i','g' }; // 作为数组没有问题，但作为字符串必须有结束符
	char good_pig[10] = { 'P','e','p','p','a',' ','p','i','g','\0' }; // \0表示字符串在此结束
	cout << "bad pig: " << bad_pig << endl; // Peppa pig烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫蘌eppa pig
	cout << "good pig: " << good_pig << endl; // Peppa pig
	cout << "len of bad pig: " << strlen(bad_pig) << endl; // 返回一个奇怪的数（57
	cout << size(bad_pig) << endl; // 数组长度为9
	cout << "len of good pig: " << strlen(good_pig) << endl; // 返回9(字符串长度）而不是10（数组长度）
	cout << size(good_pig) << endl; // 字符串长度为10

	return 0;

}


#include <iostream>
#include <cstring>
using namespace std;

int main()
{
	char str1[] = "Hello, \0cpp"; // 只能用双引号
	char str2[] = "Sbcd";
	char result[128];

	for (int i = 0; i < 16; i++)
		cout << i << ": " << str1[i] << endl;

	strcpy(result, str1);  // 拷贝 strcpy(dest, const src), 拷贝strlen(src)个字符串到dtest，如果strlen(dtest)<strlen(src),则会出现越界的问题
	// strncpy(dtest, const src, count) 安全拷贝, count = min(strlen(dtest), strlen(src))
	cout << "result= " << result << endl;
	strcat(result, str2); // 连接 strcat(dest, src)
	cout << "result= " << result << endl;
	cout << "len(result)" << result.length() << endl;

	cout << "strcmp() = " << strcmp(str1, str2) << endl; //比较str1和str2的大小

	return 0;
}


#include <iostream>
#include <string>

using namespace std;
int main()
{
	std::string str1 = "Hello";
	std::string str2 = "SUSTech";
	std::string result = str1 + ", " + str2;

	cout << "result = " + result << endl;

	cout << "The length is " << result.length() << endl;

	cout << "str1 < str2 is " << (str1 < str2) << endl;

	return 0;
}


#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// 结构体是包含不同类型变量的组合（list）， 但表达方式更像class


struct Student {
	char name[4];
	int born;
	bool male;
};
int main()
{
	Student Sun = { "sun", 1992, 1};

	printf("name: % s, DOB : % d, sex : % s\n",
		Sun.name, Sun.born, Sun.male ? "male" : "female");

	Sun.born = 2002;
	printf("name: % s, DOB : % d, sex : % s\n",
		Sun.name, Sun.born, Sun.male ? "male" : "female");

	return 0;
}



#include <iostream>
using namespace std;

struct Student1 {
	int id; // 整数4字节
	bool male; // boolean 1字节
	char label; // char 1字节
	float weight; // float 4字节 
};
// 理论上是10个字节，但是内存到寄存器是以每4个字节一搬运，因此在label之后有两个空格，这样weight从第9个开始
// 可以完整的占4个字节 -> id 4 male 1 label 1 空格 2 weight 4

struct Student2 {
	int id;
	bool male;
	float weight;
	char label;
};
// 同上 id 4 male 1 空格 3 weight 4 label 1 空格 3

int main()
{
	cout << "Size of Student1: " << sizeof(Student1) << endl; //12
	cout << "Size of Student2: " << sizeof(Student2) << endl; //16
	return 0;
}

// 判断计算机是litte-endian（x86）还是big-endian（powerPC）
// litte-endian -> 以内存较小的位置作为结尾 对于一个int 读取方式为 p+3 p+2 p+1 p+0
// big-endian -> 以内存较大的位置作为结尾 对于一个int 读取方式为 p+0 p+1 p+2 p+3
#include <iostream>
using namespace std;

typedef unsigned char BYTE;
int main()
{
	unsigned int num, * p;
	p = &num;
	num = 0; 
	cout << sizeof(num) << endl; // 4 -> 32位的int
	*(BYTE*)p = 10; // num的首地址赋值为10，即 p+0->10 p+1 p+2 p+3 ->0， little-endian读成 0 0 0 10
	cout << num << endl; // 10
	if (num == 10) 
	{
		printf("The endian of cpu is little\n");
	}
	else //num == 10 0 0 0
	{
		printf("The endian of cpu is big\n");
	}
	return 0;
}


#include <iostream>
using namespace std;


// union联合体类似于结构体，区别在于所有成员共享同一个内存
union ipv4address {
	std::uint32_t address32;  // 可以把address看成32位的整数
	std::uint8_t address8[4]; // 也可以看成4个8位的整数
};

int main()
{
	union ipv4address ip;
	cout << "sizeof(ip) = " << sizeof(ip) << endl; // 4

	ip.address8[0] = 127;
	ip.address8[1] = 0;
	ip.address8[2] = 0;
	ip.address8[3] = 1;

	cout << "The address is ";
	cout << +ip.address8[0] << ".";
	cout << +ip.address8[1] << ".";
	cout << +ip.address8[2] << ".";
	cout << +ip.address8[3] << endl;

	cout << std::hex;
	cout << "in hex " << ip.address32 << endl; // 100007f little-endian 127（7f）在末尾

	return 0;
}

// enum 相当于一个const array 每一个元素都是其对应位置的整数
#include <iostream>
using namespace std;

enum color { WHITE, BLACK, RED, GREEN, BLUE, YELLOW, NUM_COLORS };

int main()
{
	cout << BLACK << endl; // 1
	cout << color(1) << endl; // 1

	int y = int(YELLOW); // 5
	int n = int(NUM_COLORS); // 6
	cout << y << ";" << n << endl;

	y += 1;
	// YELLO += 1; 由于是const 不能更改

	color pen_color = RED;
	cout << pen_color << endl; // 2

	return 0;
}

// 用g++编译
#include <iostream>
using namespace std;

// 使用 元素=int i来限定元素的值
enum datatype { TYPE_INT8 = 1, TYPE_INT16 = 2, TYPE_INT32 = 4, TYPE_INT64 = 8 };

// 结构体point的两个变量，type和data
struct Point {
	datatype type;
	union {
		std::int8_t data8[3];
		std::int16_t data16[3];
		std::int32_t data32[3];
		std::int64_t data64[3];
	};
};

size_t datawidth(Point pt)
{
	return size_t(pt.type) * 3; // point的宽度等于整数的byte * 数量
}

int64_t l1norm(Point pt) // 求point的模
{
	int64_t result = 0;
	switch (pt.type)
	{
	case (TYPE_INT8):
		result = abs(pt.data8[0]) + abs(pt.data8[1]) + abs(pt.data8[2]);
		break;
	case (TYPE_INT16):
		result = abs(pt.data16[0]) + abs(pt.data16[1]) + abs(pt.data16[2]);
		break;
	case (TYPE_INT32):
		result = abs(pt.data32[0]) + abs(pt.data32[1]) + abs(pt.data32[2]);
		break;
	case (TYPE_INT64):
		result = abs(pt.data64[0]) + abs(pt.data64[1]) + abs(pt.data64[2]);
		break;
	}
	return result;
}

int main()
{

	//declaration and initialization
	Point point1 = { .type = TYPE_INT8, .data8 = {-2,3,4} };  // 使用.属性来限定输入的值对应哪个属性
	Point point2 = { .type = TYPE_INT32, .data32 = {1,-2,3} };

	cout << "Data width = " << datawidth(point1) << endl; // 3 1*3
	cout << "Data width = " << datawidth(point2) << endl; // 12 4*3

	cout << "L1 norm = " << l1norm(point1) << endl; // 9
	cout << "L1 norm = " << l1norm(point2) << endl; // 6


	return 0;
}


#include <iostream>
using namespace std;

typedef int myint;
typedef unsigned char vec3b[3];
typedef struct _rgb_struct { // name _rgb_struct can be omit
	unsigned char r;
	unsigned char g;
	unsigned char b;
}  rgb_struct;

int main()
{
	myint num = 32;

	// the following two lines are identical
	//unsigned char color[3] = {255, 0, 255};
	vec3b color = { 255, 0, 255 };
	cout << hex;
	cout << "R=" << +color[0] << ", ";
	cout << "G=" << +color[1] << ", ";
	cout << "B=" << +color[2] << endl;

	rgb_struct rgb = { 0, 255, 128 };
	cout << "R=" << +rgb.r << ", ";
	cout << "G=" << +rgb.g << ", ";
	cout << "B=" << +rgb.b << endl;

	cout << sizeof(rgb.r) << endl;
	cout << sizeof(+rgb.r) << endl; //why 4?

	return 0;
}

*/

