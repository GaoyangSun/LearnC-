// 函数的调用是有代价的，在函数运行前：存储当前运行的地址，把寄存器和局部变量压栈
// 运行后：恢复寄存器和局部变量，取回运行值，跳转至原运行地址
#include <iostream>
#include <float.h>
using namespace std; 

struct Matrix
{
    int rows;
    int cols;
    float* pData;
};

float matrix_max(Matrix mat) // 此处为pass by value, 也可以改为pass by refernce -> float matrix_max(const Matrix & mat) -> 加上const是为了防止mat被修改
{
    float max = FLT_MIN;
    for (int r = 0; r < mat.rows; r++)
        for (int c = 0; c < mat.cols; c++)
        {
            float val = mat.pData[r * mat.cols + c]; // max 和 val逐个比较
            max = (max > val ? max : val);
        };
    return max;
};

Matrix* create_matrix(int rows, int cols)
{
    Matrix* p = new Matrix{ rows, cols }; // 新建一个matrix
    p->pData = new float[rows * cols]{ 1.f, 2.f ,3.f }; // 对matrix里面的pData初始化
    return p;
};

bool matrix_add(const Matrix& matA, const Matrix& matB, Matrix& matC) // c++只能返回一个东西，这个地方设置为返回bool，也可以将matc一起返回，那样需要新建一个结构体
// 使用& -> pass by reference可以无需拷贝，直接对matC的值进行修改
{
    bool canAdd = false;
    if ((matA.rows == matB.rows) && (matB.rows == matC.rows))
        if ((matA.cols == matB.cols) && (matB.cols == matC.cols))
            canAdd = true;
            for (int r = 0; r < matA.rows; r++)
                for (int c = 0; c < matA.cols; c++)
                { 
                    int idx = r * matA.cols + c;
                    matC.pData[idx] = matA.pData[idx] + matB.pData[idx];
                }
    return canAdd;
};

int main()
{
    cout << "create matA" << endl;
    Matrix matA = { 4,8 };
    matA.pData = new float[matA.rows * matA.cols]{ 1.f, 2.f, 3.f };

    cout << "create matB" << endl;
    Matrix matB = { 4,8 };
    matB.pData = new float[matB.rows * matB.cols]{ 10.f, 20.f, 30.f };

    cout << "create matC" << endl;
    Matrix matC = { 4, 8 };
    matC.pData = new float[matC.rows * matC.cols]{}; // 最好加上{}，否则里面的值可能是随机值
    
    bool didAdd = matrix_add(matA, matB, matC); // 返回是否加成功，如果成功，matC里面的值已经更改
    cout << "added?: " << didAdd << endl;

    // some operations on the matrices

    float maxa = matrix_max(matA);
    float maxb = matrix_max(matB);
    float maxc = matrix_max(matC);

    cout << "max(matA) = " << maxa << endl;
    cout << "max(matB) = " << maxb << endl;
    cout << "max(matC) = " << maxc << endl;


    delete[] matA.pData; // 释放内存，不能写成delete matA,因为matA不是动态生成的，而matA里面的pData是动态生成的
    delete[] matB.pData;
    delete[] matC.pData;

    return 0;
}


// 传参的两种方式：pass by value -> 传递一份拷贝的数据， pass by reference -> 传递数据的引用。无需拷贝
#include <iostream>
using namespace std;

int foo1(int x)
{
    x += 10;
    cout << &x << endl; // 0x61fef0
    return x;
}


int foo2(int* p)
{
    cout << p << endl; // 0x61ff00
    (*p) += 10;
    return *p;
}

int main()
{
    int num1 = 20;
    int num2 = foo1(num1);
    cout << &num1 << endl; // 0x61ff00
    cout << "num1=" << num1 << endl; // 20
    cout << "num2=" << num2 << endl; // 30
    // 注意到，num1的地址和foo1中局部变量x的地址不同，因此对x的修改不会影响num1的值

    int* p = &num1;
    cout << p << endl; // 0x61ff00
    int num3 = foo2(p);
    cout << p << endl; // 0x61ff00
    cout << "num1=" << num1 << endl; // 30
    cout << "*p=" << *p << endl; // 30 
    cout << "num3=" << num3 << endl; //30
    // 注意到，num1的地址和foo2中局部变量p的地址相同，因此对(*p)的修改会影响num1的值
    // 两者都是pass by value, 第一个是传值，第二个是传指针

    return 0;
}


// reference是别名，可以看做和原始变量相同的东西（地址相同）
#include <iostream>
using namespace std;

int main()
{
    int num = 0;
    int& num_ref = num; // 此处的&不是取地址的意思，而是初始化的引用
    cout << "num = " << num << endl; // 0
    cout << &num << endl; // 0x61ff08 
    cout << &num_ref << endl; // 0x61ff08  num_ref的地址和num完全相同

    num_ref = 10;
    cout << "num = " << num << endl; // 10
    cout << &num << endl; // 0x61ff08
    cout << &num_ref << endl; // 0x61ff08 对num_ref的值改变也不会影响num_ref的地址
    return 0;
}



#include <iostream>
using namespace std;

inline int max_function(int a, int b)
{
    if (a > b)
        return a;
    else
        return b;
}


//#define MAX_MACRO(a, b) a>b ? a : b
// 宏里面的变量尽量加括号，以由于运算符优先级的问题导致结果不对
#define MAX_MACRO(a, b) (a)>(b) ? (a) : (b) 

int main()
{
    int num1 = 20;
    int num2 = 30;
    int maxv = max_function(num1, num2);
    cout << maxv << endl; // 30

    maxv = MAX_MACRO(num1, num2);
    cout << maxv << endl; // 30

    maxv = MAX_MACRO(num1++, num2++);
    // (num1++)>(num2++) ? (num1++) : (num2++)  注意 num1++是一个表达式，其返回值时num1
    // 1. num1++ -> num1=21 2. num2++ -> num2 = 31
    // 3. false -> 返回num2++ -> 返回31, num2->32 

    cout << maxv << endl; // 31
    cout << "num1=" << num1 << endl; // 21
    cout << "num2=" << num2 << endl; // 32

    num1 = 20; // 不能两次初始化，int num1 = 20. 此处单纯是赋值。
    num2 = 30;
    maxv = max_function(num1++, num2++);
    // 函数pass by value, 传入的值时20 和 30. 同时 num1=21 num2=31
    // 返回30
    cout << maxv << endl; // 30
    cout << "num3=" << num1 << endl; // 21
    cout << "num4=" << num2 << endl; // 31

    num1 = 0xAB09; // 43785
    num2 = 0xEF08; // 61192
    maxv = MAX_MACRO(num1 & 0xFF, num2 & 0xFF);
    // 16进制可以直接进行位运算 0xFF -> 111111111 -> 只考虑后面8位即可 0x09-> 1001 -> 1001 -> 9
    // 同理 num2 & 0xFF -> 0x08 -> 8
    cout << maxv << endl; // 9
    cout << num1 << endl; // 43785
    cout << num2 << endl; // 61192

    num1 = 0xAB09;
    num2 = 0xEF08;
    maxv = max_function(num1 & 0xFF, num2 & 0xFF);
    cout << maxv << endl; // 9
    cout << num1 << endl; // 43785
    cout << num2 << endl; // 61192

    return 0;
}
