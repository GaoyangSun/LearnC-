/*
assert(true) -> do nonthing
assert(false) -> 报错并abort()
cassert中有如下信息
#ifdef NDEBUG
# define assert(codnition) ((void)0)
#else
# define assert(condition) // implementation defined
endif
即无论true or false, do nothing
因此正式发布时，为了防止报错信息暴露，可以在#include <cassert>之前添加#define NDEBUG
或者在编译时添加 -> g++ main.cpp -DNDEBUG
*/

#include <iostream>
#define NDEBUG
#include <cassert>

int main(int argc, char** argv)
{
    assert(argc == 2); // 除了a.exe之外 另有一个参数 如果不满足 则程序会终止并且报错
    std::cout << "This is an assert example." << std::endl;
    return 0;
}


// 异常处理的几种方式


// 1. 杀死程序
float ratio(float a, float b)
{
    if (fabs(a + b) < FLT_EPSILON)
    {
        std::cerr << "The sum of the two arguments is close to zero." << std::endl;
        std::abort();
    }
    return (a - b) / (a + b);
    //return int(a - b) / int(a + b);// divided by zero behavior differently for int and float
}

// 2. 返回false
bool ratio(float a, float b, float& c)
{
    if (fabs(a + b) < FLT_EPSILON)
    {
        std::cerr << "The sum of the two arguments is close to zero." << std::endl;
        return false;
    }
    c = (a - b) / (a + b);
    return true;
}

// 3. 捕获异常 
// throw-> 抛出异常 try-catch->捕获异常
#include <iostream>
#include <cstdlib>
#include <cfloat>

float ratio(float a, float b)
{
    if (abs(a + b) < FLT_EPSILON)
        throw "The sum of the two arguments is close to zero.";

    return (a - b) / (a + b);
}

int main()
{
    float x = 0.f;
    float y = 0.f;
    float z = 0.f;

    std::cout << "Please input two numbers <q to quit>:";
    while (std::cin >> x >> y)
    {
        { //try and catch
            try {
                z = ratio(x, y);
                std::cout << "ratio(" << x << ", " << y << ") = " << z << std::endl;
            }
            catch (const char* msg)
            {
                std::cerr << "Call ratio() failed: " << msg << std::endl;
                std::cerr << "I give you another chance." << std::endl;
            }
        }

        // { //if no try-catch 不捕获异常 程序直接abort()
        //     z = ratio(x,y);
        //     std::cout << "ratio(" << x << ", " << y<< ") = " << z << std::endl;            
        // }

        std::cout << "Please input two numbers <q to quit>:";
    }
    std::cout << "Bye!" << std::endl;
    return 0;
}

// 4. 分情况捕获异常 
#include <iostream>
#include <cstdlib>
#include <cfloat>

float ratio(float a, float b)
{
    if (a < 0)  // -1 1
        throw 1;
    if (b < 0) // 1 -1
        throw 2;
    if (abs(a + b) < FLT_EPSILON) // 0 0
        throw "The sum of the two arguments is close to zero.";

    return (a - b) / (a + b);
}

int main()
{
    float x = 0.f;
    float y = 0.f;
    float z = 0.f;

    std::cout << "Please input two numbers <q to quit>:";
    while (std::cin >> x >> y)
    {
        try {
            z = ratio(x, y);
            std::cout << "ratio(" << x << ", " << y << ") = " << z << std::endl;
        }
        catch (const char* msg)
        {
            std::cerr << "Call ratio() failed: " << msg << std::endl;
            std::cerr << "I give you another chance." << std::endl;
        }
        catch (int eid)
        {
            if (eid == 1)
                std::cerr << "Call ratio() failed: the 1st argument should be positive." << std::endl;
            else if (eid == 2) 
                std::cerr << "Call ratio() failed: the 2nd argument should be positive." << std::endl;
            else 
                std::cerr << "Call ratio() failed: unrecognized error code." << std::endl;

            std::cerr << "I give you another chance." << std::endl;
        }

        std::cout << "Please input two numbers <q to quit>:";
    }
    std::cout << "Bye!" << std::endl;
    return 0;
}

// 5. 分层捕获异常
// catch(...)可以捕获任意异常
#include <iostream>
#include <cstdlib>
#include <cfloat>

float ratio(float a, float b)
{
    if (a < 0)
        throw 1;
    if (b < 0)
        throw 2;
    if (abs(a + b) < FLT_EPSILON)
        throw "The sum of the two arguments is close to zero.";

    return (a - b) / (a + b);
}

float ratio_wrapper(float a, float b) // 只捕获整数异常，其他不处理
{
    try {
        return ratio(a, b);
    }
    catch (int eid) 
    {
        if (eid == 1)
            std::cerr << "Call ratio() failed: the 1st argument should be positive." << std::endl;
        else if (eid == 2)
            std::cerr << "Call ratio() failed: the 2nd argument should be positive." << std::endl;
        else
            std::cerr << "Call ratio() failed: unrecognized error code." << std::endl;
    }
    return 0;
}

int main()
{
    float x = 0.f;
    float y = 0.f;
    float z = 0.f;

    std::cout << "Please input two numbers <q to quit>:";
    while (std::cin >> x >> y)
    {
        try {
            z = ratio_wrapper(x, y);
            std::cout << "ratio(" << x << ", " << y << ") = " << z << std::endl;
        }
        catch (const char* msg)
        {
            std::cerr << "Call ratio() failed: " << msg << std::endl;
            std::cerr << "I give you another chance." << std::endl;
        }

        std::cout << "Please input two numbers <q to quit>:";
    }
    std::cout << "Bye!" << std::endl;
    return 0;
}

// 异常可以是类

#include <iostream>

class Base
{
public:
    Base() {}
};

class Derived : public Base
{
public:
    Derived() {}
};

int main()
{
    try
    {
        throw Derived();
    }
    catch (const Base& base)
    {
        std::cerr << "I caught Base." << std::endl;
    }
    catch (const Derived& derived)
    { // 由于父类匹配，子类永远无法被捕获
        std::cerr << "I caught Derived." << std::endl;
    }
    return 0;
}

// 标准类中有一些特定的异常，std::exception
// -> logic_error, domain_error, invalid_argument, length_error, out_of_range, runtime_error, range_error, overflow_error, underflow_error
// 在函数后添加noexcept，保证不会抛出异常  -> void foo() noexcept;
// 在新申请的内存后加nothrow，不会抛出异常 -> p = new(nothrow) int[length];
#include <iostream>
#include <cstdlib>
using namespace std;

int main()
{
    size_t length = 80000000000L;
    int * p = NULL;
    
    try {
        cout << "Trying to allocate a big block of memory" << endl;
        p = new int[length];
        //p = new(nothrow) int[length];
        cout << "No exception." << endl;
    }
    catch (std::bad_alloc & ba)
    {
        cout << "bad_alloc exception!" << endl;
        cout << ba.what() << endl;
    }
    
    if(p)
        cout << "Memory successfully allocated." << endl;
    else
        cout << "So bad, null pointer." << endl;

    // for(size_t i = 0; i < length; i++)
    //     p[i] = i;
    // size_t sum;
    // for(size_t i = 0; i < length; i++)
    //     sum += p[i];
    // cout << "Sum = " << sum << endl;
    if(p)
        delete [] p;
    return 0;
}
